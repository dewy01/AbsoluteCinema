//go:build go1.22

// Package roomgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package roomgen

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateRoomInput defines model for CreateRoomInput.
type CreateRoomInput struct {
	CinemaID openapi_types.UUID `json:"cinemaID"`
	Name     string             `json:"name"`
	Seats    []SeatInput        `json:"seats"`
}

// RoomOutput defines model for RoomOutput.
type RoomOutput struct {
	CinemaID *openapi_types.UUID `json:"cinemaID,omitempty"`
	Id       *openapi_types.UUID `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Seats    *[]SeatOutput       `json:"seats,omitempty"`
}

// SeatInput defines model for SeatInput.
type SeatInput struct {
	Number int    `json:"number"`
	Row    string `json:"row"`
}

// SeatOutput defines model for SeatOutput.
type SeatOutput struct {
	Id     *openapi_types.UUID `json:"id,omitempty"`
	Number *int                `json:"number,omitempty"`
	Row    *string             `json:"row,omitempty"`
}

// UpdateRoomInput defines model for UpdateRoomInput.
type UpdateRoomInput struct {
	CinemaID openapi_types.UUID `json:"cinemaID"`
	Id       openapi_types.UUID `json:"id"`
	Name     string             `json:"name"`
}

// PostRoomsJSONRequestBody defines body for PostRooms for application/json ContentType.
type PostRoomsJSONRequestBody = CreateRoomInput

// PutRoomsIdJSONRequestBody defines body for PutRoomsId for application/json ContentType.
type PutRoomsIdJSONRequestBody = UpdateRoomInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new room
	// (POST /rooms/)
	PostRooms(w http.ResponseWriter, r *http.Request)
	// Get rooms by cinema ID
	// (GET /rooms/cinema/{cinemaID})
	GetRoomsCinemaCinemaID(w http.ResponseWriter, r *http.Request, cinemaID openapi_types.UUID)
	// Delete a room by ID
	// (DELETE /rooms/{id})
	DeleteRoomsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get a room by ID
	// (GET /rooms/{id})
	GetRoomsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update a room by ID
	// (PUT /rooms/{id})
	PutRoomsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostRooms operation middleware
func (siw *ServerInterfaceWrapper) PostRooms(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRooms(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRoomsCinemaCinemaID operation middleware
func (siw *ServerInterfaceWrapper) GetRoomsCinemaCinemaID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cinemaID" -------------
	var cinemaID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "cinemaID", r.PathValue("cinemaID"), &cinemaID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cinemaID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoomsCinemaCinemaID(w, r, cinemaID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteRoomsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteRoomsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRoomsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRoomsId operation middleware
func (siw *ServerInterfaceWrapper) GetRoomsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoomsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutRoomsId operation middleware
func (siw *ServerInterfaceWrapper) PutRoomsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutRoomsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/rooms/", wrapper.PostRooms)
	m.HandleFunc("GET "+options.BaseURL+"/rooms/cinema/{cinemaID}", wrapper.GetRoomsCinemaCinemaID)
	m.HandleFunc("DELETE "+options.BaseURL+"/rooms/{id}", wrapper.DeleteRoomsId)
	m.HandleFunc("GET "+options.BaseURL+"/rooms/{id}", wrapper.GetRoomsId)
	m.HandleFunc("PUT "+options.BaseURL+"/rooms/{id}", wrapper.PutRoomsId)

	return m
}
