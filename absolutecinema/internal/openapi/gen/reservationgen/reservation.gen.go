//go:build go1.22

// Package reservationgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package reservationgen

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateReservationInput defines model for CreateReservationInput.
type CreateReservationInput struct {
	GuestEmail    *openapi_types.Email `json:"guestEmail,omitempty"`
	GuestName     *string              `json:"guestName,omitempty"`
	ReservedSeats []ReservedSeatInput  `json:"reservedSeats"`
	ScreeningID   openapi_types.UUID   `json:"screeningID"`
	UserID        *openapi_types.UUID  `json:"userID"`
}

// ReservationOutput defines model for ReservationOutput.
type ReservationOutput struct {
	GuestEmail    *openapi_types.Email  `json:"guestEmail,omitempty"`
	GuestName     *string               `json:"guestName,omitempty"`
	Id            *openapi_types.UUID   `json:"id,omitempty"`
	PdfPath       *string               `json:"pdfPath,omitempty"`
	ReservedSeats *[]ReservedSeatOutput `json:"reservedSeats,omitempty"`
	ScreeningID   *openapi_types.UUID   `json:"screeningID,omitempty"`
	UserID        *openapi_types.UUID   `json:"userID"`
}

// ReservedSeatInput defines model for ReservedSeatInput.
type ReservedSeatInput struct {
	SeatID openapi_types.UUID `json:"seatID"`
}

// ReservedSeatOutput defines model for ReservedSeatOutput.
type ReservedSeatOutput struct {
	Id     *openapi_types.UUID `json:"id,omitempty"`
	SeatID *openapi_types.UUID `json:"seatID,omitempty"`
}

// PutReservationsIdJSONBody defines parameters for PutReservationsId.
type PutReservationsIdJSONBody struct {
	PdfPath string `json:"pdfPath"`
}

// PostReservationsJSONRequestBody defines body for PostReservations for application/json ContentType.
type PostReservationsJSONRequestBody = CreateReservationInput

// PutReservationsIdJSONRequestBody defines body for PutReservationsId for application/json ContentType.
type PutReservationsIdJSONRequestBody PutReservationsIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new reservation
	// (POST /reservations/)
	PostReservations(w http.ResponseWriter, r *http.Request)
	// Get reservations by user ID
	// (GET /reservations/user/{userID})
	GetReservationsUserUserID(w http.ResponseWriter, r *http.Request, userID openapi_types.UUID)
	// Delete a reservation by ID
	// (DELETE /reservations/{id})
	DeleteReservationsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get a reservation by ID
	// (GET /reservations/{id})
	GetReservationsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update reservation PDF path
	// (PUT /reservations/{id})
	PutReservationsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostReservations operation middleware
func (siw *ServerInterfaceWrapper) PostReservations(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostReservations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReservationsUserUserID operation middleware
func (siw *ServerInterfaceWrapper) GetReservationsUserUserID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userID", r.PathValue("userID"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReservationsUserUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteReservationsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteReservationsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteReservationsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReservationsId operation middleware
func (siw *ServerInterfaceWrapper) GetReservationsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReservationsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutReservationsId operation middleware
func (siw *ServerInterfaceWrapper) PutReservationsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutReservationsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/reservations/", wrapper.PostReservations)
	m.HandleFunc("GET "+options.BaseURL+"/reservations/user/{userID}", wrapper.GetReservationsUserUserID)
	m.HandleFunc("DELETE "+options.BaseURL+"/reservations/{id}", wrapper.DeleteReservationsId)
	m.HandleFunc("GET "+options.BaseURL+"/reservations/{id}", wrapper.GetReservationsId)
	m.HandleFunc("PUT "+options.BaseURL+"/reservations/{id}", wrapper.PutReservationsId)

	return m
}
