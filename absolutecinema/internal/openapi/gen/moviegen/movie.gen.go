//go:build go1.22

// Package moviegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package moviegen

import (
	"fmt"
	"net/http"

	googleuuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateMovieInput defines model for CreateMovieInput.
type CreateMovieInput struct {
	ActorIDs    *[]openapi_types.UUID `json:"actorIDs,omitempty"`
	Description *string               `json:"description,omitempty"`
	Director    string                `json:"director"`
	Photo       openapi_types.File    `json:"photo"`
	Title       string                `json:"title"`
}

// MovieOutput defines model for MovieOutput.
type MovieOutput struct {
	ActorIDs    *[]openapi_types.UUID `json:"actorIDs,omitempty"`
	Description *string               `json:"description,omitempty"`
	Director    *string               `json:"director,omitempty"`
	Id          *googleuuid.UUID      `json:"id,omitempty"`
	PhotoPath   *string               `json:"photoPath,omitempty"`
	Title       *string               `json:"title,omitempty"`
}

// UpdateMovieInput defines model for UpdateMovieInput.
type UpdateMovieInput struct {
	ActorIDs    *[]openapi_types.UUID `json:"actorIDs,omitempty"`
	Description *string               `json:"description,omitempty"`
	Director    *string               `json:"director,omitempty"`
	Photo       *openapi_types.File   `json:"photo,omitempty"`
	Title       *string               `json:"title,omitempty"`
}

// PostMoviesMultipartRequestBody defines body for PostMovies for multipart/form-data ContentType.
type PostMoviesMultipartRequestBody = CreateMovieInput

// PutMoviesIdMultipartRequestBody defines body for PutMoviesId for multipart/form-data ContentType.
type PutMoviesIdMultipartRequestBody = UpdateMovieInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all movies
	// (GET /movies/)
	GetMovies(w http.ResponseWriter, r *http.Request)
	// Create a new movie
	// (POST /movies/)
	PostMovies(w http.ResponseWriter, r *http.Request)
	// Delete a movie by ID
	// (DELETE /movies/{id})
	DeleteMoviesId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get a movie by ID
	// (GET /movies/{id})
	GetMoviesId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update a movie by ID
	// (PUT /movies/{id})
	PutMoviesId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetMovies operation middleware
func (siw *ServerInterfaceWrapper) GetMovies(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMovies(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostMovies operation middleware
func (siw *ServerInterfaceWrapper) PostMovies(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMovies(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMoviesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteMoviesId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMoviesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMoviesId operation middleware
func (siw *ServerInterfaceWrapper) GetMoviesId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMoviesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutMoviesId operation middleware
func (siw *ServerInterfaceWrapper) PutMoviesId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutMoviesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/movies/", wrapper.GetMovies)
	m.HandleFunc("POST "+options.BaseURL+"/movies/", wrapper.PostMovies)
	m.HandleFunc("DELETE "+options.BaseURL+"/movies/{id}", wrapper.DeleteMoviesId)
	m.HandleFunc("GET "+options.BaseURL+"/movies/{id}", wrapper.GetMoviesId)
	m.HandleFunc("PUT "+options.BaseURL+"/movies/{id}", wrapper.PutMoviesId)

	return m
}
