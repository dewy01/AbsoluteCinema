//go:build go1.22

// Package seatgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package seatgen

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateSeatInput defines model for CreateSeatInput.
type CreateSeatInput struct {
	// Number Seat number in the row
	Number int                `json:"number"`
	RoomID openapi_types.UUID `json:"roomID"`

	// Row Seat row label
	Row string `json:"row"`
}

// SeatOutput defines model for SeatOutput.
type SeatOutput struct {
	Id     *openapi_types.UUID `json:"id,omitempty"`
	Number *int                `json:"number,omitempty"`
	RoomID *openapi_types.UUID `json:"roomID,omitempty"`
	Row    *string             `json:"row,omitempty"`
}

// SeatWithReservationStatusOutput defines model for SeatWithReservationStatusOutput.
type SeatWithReservationStatusOutput struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IsReserved Indicates whether the seat is already reserved for the screening
	IsReserved *bool               `json:"isReserved,omitempty"`
	Number     *int                `json:"number,omitempty"`
	RoomID     *openapi_types.UUID `json:"roomID,omitempty"`
	Row        *string             `json:"row,omitempty"`
}

// UpdateSeatInput defines model for UpdateSeatInput.
type UpdateSeatInput struct {
	Id     openapi_types.UUID `json:"id"`
	Number int                `json:"number"`
	Row    string             `json:"row"`
}

// PostSeatsJSONRequestBody defines body for PostSeats for application/json ContentType.
type PostSeatsJSONRequestBody = CreateSeatInput

// PutSeatsIdJSONRequestBody defines body for PutSeatsId for application/json ContentType.
type PutSeatsIdJSONRequestBody = UpdateSeatInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new seat
	// (POST /seats/)
	PostSeats(w http.ResponseWriter, r *http.Request)
	// Get seats by Room ID
	// (GET /seats/room/{roomID})
	GetSeatsRoomRoomID(w http.ResponseWriter, r *http.Request, roomID openapi_types.UUID)
	// Get all seats for a screening with reservation status
	// (GET /seats/screening/{screeningID})
	GetSeatsScreeningScreeningID(w http.ResponseWriter, r *http.Request, screeningID openapi_types.UUID)
	// Delete a seat by ID
	// (DELETE /seats/{id})
	DeleteSeatsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get seat by ID
	// (GET /seats/{id})
	GetSeatsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update a seat
	// (PUT /seats/{id})
	PutSeatsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostSeats operation middleware
func (siw *ServerInterfaceWrapper) PostSeats(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSeats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSeatsRoomRoomID operation middleware
func (siw *ServerInterfaceWrapper) GetSeatsRoomRoomID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "roomID" -------------
	var roomID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomID", r.PathValue("roomID"), &roomID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roomID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSeatsRoomRoomID(w, r, roomID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSeatsScreeningScreeningID operation middleware
func (siw *ServerInterfaceWrapper) GetSeatsScreeningScreeningID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "screeningID" -------------
	var screeningID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "screeningID", r.PathValue("screeningID"), &screeningID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "screeningID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSeatsScreeningScreeningID(w, r, screeningID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSeatsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSeatsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSeatsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSeatsId operation middleware
func (siw *ServerInterfaceWrapper) GetSeatsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSeatsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutSeatsId operation middleware
func (siw *ServerInterfaceWrapper) PutSeatsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutSeatsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/seats/", wrapper.PostSeats)
	m.HandleFunc("GET "+options.BaseURL+"/seats/room/{roomID}", wrapper.GetSeatsRoomRoomID)
	m.HandleFunc("GET "+options.BaseURL+"/seats/screening/{screeningID}", wrapper.GetSeatsScreeningScreeningID)
	m.HandleFunc("DELETE "+options.BaseURL+"/seats/{id}", wrapper.DeleteSeatsId)
	m.HandleFunc("GET "+options.BaseURL+"/seats/{id}", wrapper.GetSeatsId)
	m.HandleFunc("PUT "+options.BaseURL+"/seats/{id}", wrapper.PutSeatsId)

	return m
}
