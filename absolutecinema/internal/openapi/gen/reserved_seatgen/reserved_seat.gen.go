//go:build go1.22

// Package reserved_seatgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package reserved_seatgen

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateReservedSeatInput defines model for CreateReservedSeatInput.
type CreateReservedSeatInput struct {
	ReservationID openapi_types.UUID `json:"reservationID"`
	SeatID        openapi_types.UUID `json:"seatID"`
}

// ReservedSeatOutput defines model for ReservedSeatOutput.
type ReservedSeatOutput struct {
	Id            *openapi_types.UUID `json:"id,omitempty"`
	ReservationID *openapi_types.UUID `json:"reservationID,omitempty"`
	SeatID        *openapi_types.UUID `json:"seatID,omitempty"`
}

// PostReservedSeatsJSONRequestBody defines body for PostReservedSeats for application/json ContentType.
type PostReservedSeatsJSONRequestBody = CreateReservedSeatInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a reserved seat
	// (POST /reserved-seats/)
	PostReservedSeats(w http.ResponseWriter, r *http.Request)
	// Delete all reserved seats for a reservation
	// (DELETE /reserved-seats/reservation/{reservationID})
	DeleteReservedSeatsReservationReservationID(w http.ResponseWriter, r *http.Request, reservationID openapi_types.UUID)
	// Get reserved seats by reservation ID
	// (GET /reserved-seats/reservation/{reservationID})
	GetReservedSeatsReservationReservationID(w http.ResponseWriter, r *http.Request, reservationID openapi_types.UUID)
	// Delete reserved seat by ID
	// (DELETE /reserved-seats/{id})
	DeleteReservedSeatsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get reserved seat by ID
	// (GET /reserved-seats/{id})
	GetReservedSeatsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostReservedSeats operation middleware
func (siw *ServerInterfaceWrapper) PostReservedSeats(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostReservedSeats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteReservedSeatsReservationReservationID operation middleware
func (siw *ServerInterfaceWrapper) DeleteReservedSeatsReservationReservationID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reservationID" -------------
	var reservationID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reservationID", r.PathValue("reservationID"), &reservationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reservationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteReservedSeatsReservationReservationID(w, r, reservationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReservedSeatsReservationReservationID operation middleware
func (siw *ServerInterfaceWrapper) GetReservedSeatsReservationReservationID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reservationID" -------------
	var reservationID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "reservationID", r.PathValue("reservationID"), &reservationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reservationID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReservedSeatsReservationReservationID(w, r, reservationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteReservedSeatsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteReservedSeatsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteReservedSeatsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReservedSeatsId operation middleware
func (siw *ServerInterfaceWrapper) GetReservedSeatsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReservedSeatsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/reserved-seats/", wrapper.PostReservedSeats)
	m.HandleFunc("DELETE "+options.BaseURL+"/reserved-seats/reservation/{reservationID}", wrapper.DeleteReservedSeatsReservationReservationID)
	m.HandleFunc("GET "+options.BaseURL+"/reserved-seats/reservation/{reservationID}", wrapper.GetReservedSeatsReservationReservationID)
	m.HandleFunc("DELETE "+options.BaseURL+"/reserved-seats/{id}", wrapper.DeleteReservedSeatsId)
	m.HandleFunc("GET "+options.BaseURL+"/reserved-seats/{id}", wrapper.GetReservedSeatsId)

	return m
}
