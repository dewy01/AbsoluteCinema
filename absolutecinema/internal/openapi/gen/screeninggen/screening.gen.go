//go:build go1.22

// Package screeninggen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package screeninggen

import (
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateScreeningInput defines model for CreateScreeningInput.
type CreateScreeningInput struct {
	MovieID   openapi_types.UUID `json:"movieID"`
	RoomID    openapi_types.UUID `json:"roomID"`
	StartTime time.Time          `json:"startTime"`
}

// MovieOutput defines model for MovieOutput.
type MovieOutput struct {
	Description *string             `json:"description,omitempty"`
	Director    *string             `json:"director,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	PhotoPath   *string             `json:"photoPath,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// RoomOutput defines model for RoomOutput.
type RoomOutput struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// ScreeningOutput defines model for ScreeningOutput.
type ScreeningOutput struct {
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Movie     *MovieOutput        `json:"movie,omitempty"`
	Room      *RoomOutput         `json:"room,omitempty"`
	StartTime *time.Time          `json:"startTime,omitempty"`
}

// DayFilter defines model for DayFilter.
type DayFilter = openapi_types.Date

// GetScreeningsParams defines parameters for GetScreenings.
type GetScreeningsParams struct {
	// Day Filter screenings by date (YYYY-MM-DD)
	Day *DayFilter `form:"day,omitempty" json:"day,omitempty"`
}

// GetScreeningsCinemaCinemaIDParams defines parameters for GetScreeningsCinemaCinemaID.
type GetScreeningsCinemaCinemaIDParams struct {
	// Day Filter screenings by date (YYYY-MM-DD)
	Day *DayFilter `form:"day,omitempty" json:"day,omitempty"`
}

// GetScreeningsMovieMovieIDParams defines parameters for GetScreeningsMovieMovieID.
type GetScreeningsMovieMovieIDParams struct {
	// Day Filter screenings by date (YYYY-MM-DD)
	Day *DayFilter `form:"day,omitempty" json:"day,omitempty"`
}

// GetScreeningsRoomRoomIDParams defines parameters for GetScreeningsRoomRoomID.
type GetScreeningsRoomRoomIDParams struct {
	// Day Filter screenings by date (YYYY-MM-DD)
	Day *DayFilter `form:"day,omitempty" json:"day,omitempty"`
}

// PutScreeningsIdJSONBody defines parameters for PutScreeningsId.
type PutScreeningsIdJSONBody struct {
	StartTime time.Time `json:"startTime"`
}

// PostScreeningsJSONRequestBody defines body for PostScreenings for application/json ContentType.
type PostScreeningsJSONRequestBody = CreateScreeningInput

// PutScreeningsIdJSONRequestBody defines body for PutScreeningsId for application/json ContentType.
type PutScreeningsIdJSONRequestBody PutScreeningsIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all screenings
	// (GET /screenings/)
	GetScreenings(w http.ResponseWriter, r *http.Request, params GetScreeningsParams)
	// Create a new screening
	// (POST /screenings/)
	PostScreenings(w http.ResponseWriter, r *http.Request)
	// Get screenings by cinema ID
	// (GET /screenings/cinema/{cinemaID})
	GetScreeningsCinemaCinemaID(w http.ResponseWriter, r *http.Request, cinemaID openapi_types.UUID, params GetScreeningsCinemaCinemaIDParams)
	// Get screenings by movie ID
	// (GET /screenings/movie/{movieID})
	GetScreeningsMovieMovieID(w http.ResponseWriter, r *http.Request, movieID openapi_types.UUID, params GetScreeningsMovieMovieIDParams)
	// Get screenings by room ID
	// (GET /screenings/room/{roomID})
	GetScreeningsRoomRoomID(w http.ResponseWriter, r *http.Request, roomID openapi_types.UUID, params GetScreeningsRoomRoomIDParams)
	// Delete a screening by ID
	// (DELETE /screenings/{id})
	DeleteScreeningsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get a screening by ID
	// (GET /screenings/{id})
	GetScreeningsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update start time of a screening by ID
	// (PUT /screenings/{id})
	PutScreeningsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetScreenings operation middleware
func (siw *ServerInterfaceWrapper) GetScreenings(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScreeningsParams

	// ------------- Optional query parameter "day" -------------

	err = runtime.BindQueryParameter("form", true, false, "day", r.URL.Query(), &params.Day)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "day", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScreenings(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostScreenings operation middleware
func (siw *ServerInterfaceWrapper) PostScreenings(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScreenings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetScreeningsCinemaCinemaID operation middleware
func (siw *ServerInterfaceWrapper) GetScreeningsCinemaCinemaID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cinemaID" -------------
	var cinemaID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "cinemaID", r.PathValue("cinemaID"), &cinemaID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cinemaID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScreeningsCinemaCinemaIDParams

	// ------------- Optional query parameter "day" -------------

	err = runtime.BindQueryParameter("form", true, false, "day", r.URL.Query(), &params.Day)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "day", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScreeningsCinemaCinemaID(w, r, cinemaID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetScreeningsMovieMovieID operation middleware
func (siw *ServerInterfaceWrapper) GetScreeningsMovieMovieID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "movieID" -------------
	var movieID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "movieID", r.PathValue("movieID"), &movieID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "movieID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScreeningsMovieMovieIDParams

	// ------------- Optional query parameter "day" -------------

	err = runtime.BindQueryParameter("form", true, false, "day", r.URL.Query(), &params.Day)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "day", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScreeningsMovieMovieID(w, r, movieID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetScreeningsRoomRoomID operation middleware
func (siw *ServerInterfaceWrapper) GetScreeningsRoomRoomID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "roomID" -------------
	var roomID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "roomID", r.PathValue("roomID"), &roomID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roomID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScreeningsRoomRoomIDParams

	// ------------- Optional query parameter "day" -------------

	err = runtime.BindQueryParameter("form", true, false, "day", r.URL.Query(), &params.Day)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "day", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScreeningsRoomRoomID(w, r, roomID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteScreeningsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteScreeningsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteScreeningsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetScreeningsId operation middleware
func (siw *ServerInterfaceWrapper) GetScreeningsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScreeningsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutScreeningsId operation middleware
func (siw *ServerInterfaceWrapper) PutScreeningsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutScreeningsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/screenings/", wrapper.GetScreenings)
	m.HandleFunc("POST "+options.BaseURL+"/screenings/", wrapper.PostScreenings)
	m.HandleFunc("GET "+options.BaseURL+"/screenings/cinema/{cinemaID}", wrapper.GetScreeningsCinemaCinemaID)
	m.HandleFunc("GET "+options.BaseURL+"/screenings/movie/{movieID}", wrapper.GetScreeningsMovieMovieID)
	m.HandleFunc("GET "+options.BaseURL+"/screenings/room/{roomID}", wrapper.GetScreeningsRoomRoomID)
	m.HandleFunc("DELETE "+options.BaseURL+"/screenings/{id}", wrapper.DeleteScreeningsId)
	m.HandleFunc("GET "+options.BaseURL+"/screenings/{id}", wrapper.GetScreeningsId)
	m.HandleFunc("PUT "+options.BaseURL+"/screenings/{id}", wrapper.PutScreeningsId)

	return m
}
